name: Checkov PR Scan

on:
  pull_request:
    paths:
      - '**.tf'

jobs:
  checkov_scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: ${{ github.head_ref }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install Checkov
      run: |
        pip install checkov

    - name: Get changed Terraform files
      id: get_changed_files
      run: |
        echo "::set-output name=files::$(git diff --name-only --diff-filter=d origin/${{ github.base_ref }}..${{ github.head_ref }} -- '*.tf' | tr '\n' ' ')"

    - name: Run Checkov
      id: checkov
      run: |
          IFS=$'\n' read -ra FILES <<< "$(echo ${{ steps.get_changed_files.outputs.files }} | tr ' ' '\n')"
          echo "[]" > results.json
          PASSED=true
          for file in "${FILES[@]}"; do
            if [ -n "$file" ]; then
              OUTPUT=$(checkov -f "$file" --output json || true)
              if [ -n "$OUTPUT" ] && [[ "$(echo "$OUTPUT" | python -c "import sys, json; print('results' in json.loads(sys.stdin.read()))")" == "True" ]]; then
                if [[ "$(echo "$OUTPUT" | jq '.results.failed_checks | length')" -gt 0 ]]; then
                  PASSED=false
                fi
                echo "$OUTPUT" | python -c "import sys, json; a=json.load(open('results.json')); b=json.loads(sys.stdin.read()); a.extend(b['results']['failed_checks']); json.dump(a, open('results.json', 'w'))"
              fi
            fi
          done
          echo "CHECKOV_OUTPUT=$(cat results.json)" >> $GITHUB_ENV
          echo "CHECKOV_PASSED=$PASSED" >> $GITHUB_ENV
          rm results.json
      

    - name: Create comments with Checkov results
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const checks = JSON.parse(process.env.CHECKOV_OUTPUT);
          const files = [...new Set(checks.map((check) => check.file_path))];
      
          if (files.length == 0) {
            // No Terraform files were modified in this PR.
            const output = `ðŸŒŸ No Terraform files were modified in this PR or all modified Terraform files passed the Checkov checks. Good job! ðŸŒŸ`;
    
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            });
          } else {
            for (const file of files) {
              let output = '';
              const fileChecks = checks.filter((check) => check.file_path === file);
              if (fileChecks.every((check) => check.check_result.result === 'PASSED')) {
                output = `ðŸŒŸ All checks passed! ðŸŒŸ
                #### Checkov Scan Results ðŸ“– for file ${file}: 
                Great job! Your infrastructure code complies with best practices. Keep up the good work!`;
              } else {
                output = `#### Checkov Scan Results ðŸ“– for file ${file}:
                     
                | Check ID | Description | Resource | Checkov Result |
                | -------- | ----------- | -------- | -------------- |
                ${fileChecks
                  .map((check) => {
                    return `| ${check.check_id} | ${check.check_name} | ${check.resource} | ${check.check_result.result} |`;
                  })
                  .join("\n")}
      
                `;
              }
      
              output += `\n\n*Pusher: @${{ github.actor }}, Action: ${{ github.event_name }}, Working Directory: ${{ github.workspace }}, Workflow: ${{ github.workflow }}*`;
      
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              });
            }
          }
      
